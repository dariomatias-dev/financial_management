package org.cafe.views.budgets;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.cafe.core.formatters.DateMaskFormatter;
import org.cafe.database.controllers.BudgetController;
import org.cafe.database.controllers.BudgetItemController;
import org.cafe.models.budget.BudgetModel;
import org.cafe.utils.ConfirmDeleteDialog;
import org.cafe.utils.RecordVerificationUtil;
import org.cafe.utils.SearchFieldHandlerUtil;
import org.cafe.views.budget.BudgetView;
import org.cafe.views.budgets.components.manager_budget.ManagerBudgetView;

public class BudgetsView extends javax.swing.JFrame {
  private final BudgetController budgetController;
  private final BudgetItemController budgetItemController;
  private ArrayList<BudgetModel> allBudgets;
  private ArrayList<BudgetModel> displayedBudgets;

  private static final String DEFAULT_DATE = "__/__/____";
  private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("dd/MM/yyyy");

  /**
   * Construtor.
   *
   * @param budgetController Controlador de orçamentos.
   * @param budgetItemController Controlador de itens de orçamento.
   */
  public BudgetsView(
          BudgetController budgetController,
          BudgetItemController budgetItemController
  ) {
    this.budgetController = budgetController;
    this.budgetItemController = budgetItemController;

    initComponents();

    new SearchFieldHandlerUtil(searchField).initialize();

    listBudgets();

    showBudgets();

    new DateMaskFormatter().applyMask(initialDateFilterField);
    new DateMaskFormatter().applyMask(endDateFilterField);

    screenTitle.setFocusable(true);

    exitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/back_icon.png")));
  }

  /**
   * Obtém todos os orçamento.
   */
  private void listBudgets() {
    allBudgets = budgetController.getAll();
    displayedBudgets = allBudgets;
  }

  /**
   * Exibi os dados dos orçamentos repassados.
   */
  private void showBudgets() {
    DefaultTableModel tableModel = (DefaultTableModel) budgetsTable.getModel();
    tableModel.setRowCount(0);

    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");

    for (BudgetModel budget : displayedBudgets) {
      String initialDateFormatted = budget.getInitialDate().format(formatter);
      String endDateFormatted = budget.getEndDate().format(formatter);
      String valueFormatted = String.format("%.2f", budget.getTotalBudgetValue());

      Object[] rowData = new Object[6];
      rowData[0] = budget.getName();
      rowData[1] = budget.getCategory();
      rowData[2] = "R$ " + valueFormatted;
      rowData[3] = budget.getStatus();
      rowData[4] = initialDateFormatted;
      rowData[5] = endDateFormatted;

      tableModel.addRow(rowData);
    }
  }

  /**
   * Atualiza a lista de orçamentos.
   */
  private void updateScreen() {
    listBudgets();

    search();
  }

  /**
   * Método chamado quando um novo orçamento é criado.
   */
  private void onBudgetCreated(
          String budgetId
  ) {
    BudgetModel selectedBudget = budgetController.getById(budgetId);
    BudgetView budgetView = new BudgetView(
            budgetController,
            budgetItemController,
            selectedBudget,
            (value) -> {
              updateScreen();
            }
    );

    budgetView.setVisible(true);

    updateScreen();
  }

  /**
   * Método chamado quando um orçamento é atualizado.
   */
  private void onUpdateBudget(int index, BudgetModel value) {
    allBudgets.set(index, value);

    displayedBudgets = allBudgets;
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    statusSelect = new javax.swing.JComboBox<>();
    statusLabel = new javax.swing.JLabel();
    background = new javax.swing.JPanel();
    deleteButton = new javax.swing.JButton();
    updateButton = new javax.swing.JButton();
    addButton = new javax.swing.JButton();
    accessButton = new javax.swing.JButton();
    searchField = new javax.swing.JTextField();
    searchButton = new javax.swing.JButton();
    statusFilterSelect = new javax.swing.JComboBox<>();
    valueMinFilterLabel = new javax.swing.JLabel();
    valueMinFilterField = new javax.swing.JTextField();
    valueMaxFilterLabel = new javax.swing.JLabel();
    valueMaxFilterField = new javax.swing.JTextField();
    initialDateFilterLabel = new javax.swing.JLabel();
    statusFilterLabel = new javax.swing.JLabel();
    initialDateFilterField = new javax.swing.JFormattedTextField();
    endDateFilterField = new javax.swing.JFormattedTextField();
    jScrollPane2 = new javax.swing.JScrollPane();
    budgetsTable = new javax.swing.JTable();
    endDateFilterLabel1 = new javax.swing.JLabel();
    exitButton = new javax.swing.JLabel();
    screenTitle = new javax.swing.JLabel();

    statusSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Rascunho", "Finalizado", "Negado", "Aprovado" }));

    statusLabel.setBackground(new java.awt.Color(0, 0, 0));
    statusLabel.setForeground(new java.awt.Color(0, 0, 0));
    statusLabel.setText("Status:");

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    background.setBackground(new java.awt.Color(255, 255, 255));

    deleteButton.setForeground(new java.awt.Color(255, 0, 51));
    deleteButton.setText("Excluir");
    deleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        deleteButtonMouseClicked(evt);
      }
    });

    updateButton.setText("Atualizar");
    updateButton.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        updateButtonMouseClicked(evt);
      }
    });

    addButton.setText("Adicionar");
    addButton.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        addButtonMouseClicked(evt);
      }
    });

    accessButton.setText("Acessar");
    accessButton.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        accessButtonMouseClicked(evt);
      }
    });

    searchButton.setText("Filtrar");
    searchButton.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        searchButtonMouseClicked(evt);
      }
    });

    statusFilterSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Rascunho", "Finalizado", "Negado", "Aprovado" }));

    valueMinFilterLabel.setText("Valor Mínimo:");

    valueMaxFilterLabel.setText("Valor Máximo:");

    initialDateFilterLabel.setText("Data Inicial:");

    statusFilterLabel.setText("Status:");

    budgetsTable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {
        {null, null, null, null, null, null},
        {null, null, null, null, null, null},
        {null, null, null, null, null, null},
        {null, null, null, null, null, null}
      },
      new String [] {
        "Nome", "Categoria", "Valor", "Status", "Data Inicial", "Data Final"
      }
    ) {
      Class[] types = new Class [] {
        java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
      };
      boolean[] canEdit = new boolean [] {
        false, false, false, false, false, false
      };

      public Class getColumnClass(int columnIndex) {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
      }
    });
    jScrollPane2.setViewportView(budgetsTable);
    if (budgetsTable.getColumnModel().getColumnCount() > 0) {
      budgetsTable.getColumnModel().getColumn(2).setMinWidth(88);
      budgetsTable.getColumnModel().getColumn(2).setPreferredWidth(88);
      budgetsTable.getColumnModel().getColumn(2).setMaxWidth(88);
      budgetsTable.getColumnModel().getColumn(3).setMinWidth(88);
      budgetsTable.getColumnModel().getColumn(3).setPreferredWidth(88);
      budgetsTable.getColumnModel().getColumn(3).setMaxWidth(88);
      budgetsTable.getColumnModel().getColumn(4).setMinWidth(68);
      budgetsTable.getColumnModel().getColumn(4).setPreferredWidth(68);
      budgetsTable.getColumnModel().getColumn(4).setMaxWidth(68);
      budgetsTable.getColumnModel().getColumn(5).setMinWidth(68);
      budgetsTable.getColumnModel().getColumn(5).setPreferredWidth(68);
      budgetsTable.getColumnModel().getColumn(5).setMaxWidth(68);
    }

    endDateFilterLabel1.setText("Data Final:");

    exitButton.setForeground(new java.awt.Color(255, 0, 51));
    exitButton.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        exitButtonMouseClicked(evt);
      }
    });

    screenTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
    screenTitle.setForeground(new java.awt.Color(0, 0, 0));
    screenTitle.setText("Orçamentos");

    javax.swing.GroupLayout backgroundLayout = new javax.swing.GroupLayout(background);
    background.setLayout(backgroundLayout);
    backgroundLayout.setHorizontalGroup(
      backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(backgroundLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane2)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundLayout.createSequentialGroup()
            .addComponent(searchField)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(searchButton))
          .addGroup(backgroundLayout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(accessButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(addButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(updateButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(deleteButton))
          .addGroup(backgroundLayout.createSequentialGroup()
            .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(valueMinFilterLabel)
              .addComponent(initialDateFilterLabel))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addComponent(initialDateFilterField, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
              .addComponent(valueMinFilterField))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundLayout.createSequentialGroup()
                .addComponent(valueMaxFilterLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(valueMaxFilterField, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
              .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundLayout.createSequentialGroup()
                .addComponent(endDateFilterLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(endDateFilterField, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))))
          .addGroup(backgroundLayout.createSequentialGroup()
            .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(backgroundLayout.createSequentialGroup()
                .addComponent(statusFilterLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusFilterSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
              .addGroup(backgroundLayout.createSequentialGroup()
                .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(screenTitle)))
            .addGap(0, 0, Short.MAX_VALUE)))
        .addContainerGap())
    );
    backgroundLayout.setVerticalGroup(
      backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(backgroundLayout.createSequentialGroup()
        .addGap(16, 16, 16)
        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(screenTitle))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(searchButton))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(statusFilterSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(statusFilterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(valueMinFilterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(valueMaxFilterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(valueMinFilterField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(valueMaxFilterField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(initialDateFilterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(initialDateFilterField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(endDateFilterField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(endDateFilterLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(deleteButton)
          .addComponent(updateButton)
          .addComponent(accessButton)
          .addComponent(addButton))
        .addContainerGap())
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(background, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(background, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  /**
   * Remove o orçamento selecionado.
   */
  private void deleteButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseClicked
    ConfirmDeleteDialog.showDeleteConfirmation(
            budgetsTable,
            () -> {
              BudgetModel selectedExpense = displayedBudgets.get(budgetsTable.getSelectedRow());
              budgetController.removeById(selectedExpense.getId());

              updateScreen();
            }
    );
  }//GEN-LAST:event_deleteButtonMouseClicked

  /**
   * Abre a tela de atualização do orçamento selecionado.
   */
  private void updateButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseClicked
    if (RecordVerificationUtil.verifyRecords(budgetsTable, "atualizar")) {
      BudgetModel selectedBudget = displayedBudgets.get(budgetsTable.getSelectedRow());
      ManagerBudgetView updateManagerBudgetView = new ManagerBudgetView(
              budgetController,
              selectedBudget,
              (budgetId) -> {
                updateScreen();
              }
      );

      updateManagerBudgetView.setVisible(true);
    }
  }//GEN-LAST:event_updateButtonMouseClicked

  /**
   * Abre a tela de criação de orçamento.
   */
  private void addButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseClicked
    ManagerBudgetView createManagerBudgetView = new ManagerBudgetView(budgetController, null, this::onBudgetCreated);

    createManagerBudgetView.setVisible(true);
  }//GEN-LAST:event_addButtonMouseClicked

  /**
   * Abre a tela do orçamento selecionado.
   */
  private void accessButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_accessButtonMouseClicked
    if (RecordVerificationUtil.verifyRecords(budgetsTable, "acessar")) {
      BudgetModel selectedBudget = displayedBudgets.get(budgetsTable.getSelectedRow());
      BudgetView budgetView = new BudgetView(
              budgetController,
              budgetItemController,
              selectedBudget,
              (value) -> {
                onUpdateBudget(budgetsTable.getSelectedRow(), value);
              }
      );

      budgetView.setVisible(true);
    }
  }//GEN-LAST:event_accessButtonMouseClicked

  /**
   * Método de pesquisa/filtragem dos itens do orçamento.
   */
  private void search() {
    String query = searchField.getText().trim();
    String valueMinFilterText = valueMinFilterField.getText().trim();
    String valueMaxFilterText = valueMaxFilterField.getText().trim();
    String statusFilter = (String) statusFilterSelect.getSelectedItem();
    String initialDateFilterText = initialDateFilterField.getText().trim();
    String endDateFilterText = endDateFilterField.getText().trim();

    if (query.equals("Pesquisar...") && valueMinFilterText.isEmpty() && valueMaxFilterText.isEmpty() && statusFilter.equals("Todos")
            && initialDateFilterText.equals(DEFAULT_DATE) && endDateFilterText.equals(DEFAULT_DATE)) {
      displayedBudgets = allBudgets;
      showBudgets();

      return;
    }

    double valueMinFilter = Double.MIN_VALUE;
    double valueMaxFilter = Double.MAX_VALUE;
    boolean applyValueMinFilter = false;
    boolean applyValueMaxFilter = false;

    try {
      if (!valueMinFilterText.isEmpty()) {
        valueMinFilter = Double.parseDouble(valueMinFilterText);
        applyValueMinFilter = true;
      }
      if (!valueMaxFilterText.isEmpty()) {
        valueMaxFilter = Double.parseDouble(valueMaxFilterText);
        applyValueMaxFilter = true;
      }
      if (applyValueMinFilter && applyValueMaxFilter && valueMinFilter > valueMaxFilter) {
        JOptionPane.showMessageDialog(this, "O valor mínimo não pode ser maior que o valor máximo.", "Erro", JOptionPane.ERROR_MESSAGE);
        return;
      }
    } catch (NumberFormatException e) {
      JOptionPane.showMessageDialog(this, "Por favor, insira valores numéricos válidos nos campos de valor.", "Erro", JOptionPane.ERROR_MESSAGE);
      return;
    }

    LocalDate initialDateFilter = null;
    LocalDate endDateFilter = null;

    try {
      if (!initialDateFilterText.equals(DEFAULT_DATE)) {
        initialDateFilter = LocalDate.parse(initialDateFilterText, DATE_FORMATTER);
      }
      if (!endDateFilterText.equals(DEFAULT_DATE)) {
        endDateFilter = LocalDate.parse(endDateFilterText, DATE_FORMATTER);
      }
    } catch (DateTimeParseException e) {
      JOptionPane.showMessageDialog(this, "Por favor, insira datas válidas no formato dd/MM/yyyy.", "Erro", JOptionPane.ERROR_MESSAGE);
      return;
    }

    ArrayList<BudgetModel> results = new ArrayList<>();

    for (BudgetModel budget : allBudgets) {
      boolean matchesQuery = query.equals("Pesquisar...") || budget.getName().contains(query) || budget.getDescription().contains(query);
      boolean matchesStatus = statusFilter.equals("Todos") || budget.getStatus().equals(statusFilter);

      boolean matchesValue = true;
      if (applyValueMinFilter) {
        matchesValue = budget.getTotalBudgetValue() >= valueMinFilter;
      }
      if (applyValueMaxFilter && matchesValue) {
        matchesValue = budget.getTotalBudgetValue() <= valueMaxFilter;
      }

      boolean matchesDate = true;
      if (initialDateFilter != null && budget.getInitialDate() != null) {
        matchesDate = !budget.getInitialDate().toLocalDate().isBefore(initialDateFilter);
      }
      if (matchesDate && endDateFilter != null && budget.getEndDate() != null) {
        matchesDate = !budget.getEndDate().toLocalDate().isAfter(endDateFilter);
      }

      if (matchesQuery && matchesStatus && matchesValue && matchesDate) {
        results.add(budget);
      }
    }

    displayedBudgets = results;

    showBudgets();
  }

  /**
   * Método chamado para filtrar os orçamentos de acordo com as filtragens
   * definidas.
   */
  private void searchButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButtonMouseClicked
    search();
  }//GEN-LAST:event_searchButtonMouseClicked

  private void exitButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitButtonMouseClicked
    this.dispose();
  }//GEN-LAST:event_exitButtonMouseClicked

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton accessButton;
  private javax.swing.JButton addButton;
  private javax.swing.JPanel background;
  private javax.swing.JTable budgetsTable;
  private javax.swing.JButton deleteButton;
  private javax.swing.JFormattedTextField endDateFilterField;
  private javax.swing.JLabel endDateFilterLabel1;
  private javax.swing.JLabel exitButton;
  private javax.swing.JFormattedTextField initialDateFilterField;
  private javax.swing.JLabel initialDateFilterLabel;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JLabel screenTitle;
  private javax.swing.JButton searchButton;
  private javax.swing.JTextField searchField;
  private javax.swing.JLabel statusFilterLabel;
  private javax.swing.JComboBox<String> statusFilterSelect;
  private javax.swing.JLabel statusLabel;
  private javax.swing.JComboBox<String> statusSelect;
  private javax.swing.JButton updateButton;
  private javax.swing.JTextField valueMaxFilterField;
  private javax.swing.JLabel valueMaxFilterLabel;
  private javax.swing.JTextField valueMinFilterField;
  private javax.swing.JLabel valueMinFilterLabel;
  // End of variables declaration//GEN-END:variables
}
