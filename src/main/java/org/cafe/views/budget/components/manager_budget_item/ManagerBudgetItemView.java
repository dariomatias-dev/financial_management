package org.cafe.views.budget.components.manager_budget_item;

import java.time.LocalDate;
import java.util.function.Consumer;
import javax.swing.JOptionPane;
import org.cafe.database.controllers.BudgetItemDatabaseController;
import org.cafe.models.budget_item.BudgetItemModel;
import org.cafe.models.budget_item.CreateBudgetItemModel;
import org.cafe.utils.NumberValidator;

public class ManagerBudgetItemView extends javax.swing.JFrame {
  private final String budgetId;
  private final BudgetItemDatabaseController budgetItemDatabaseController;
  private final BudgetItemModel data;
  private final Consumer<BudgetItemModel> onUpdateScreen;

  /**
   * Construtor.
   *
   * @param budgetId ID do orçamento.
   * @param budgetItemDatabaseController Controlador de itens de orçamento.
   * @param data Dados do registro selecionado.
   * @param onUpdateScreen Função para atualização da tela de listagem das
   * despesas.
   */
  public ManagerBudgetItemView(String budgetId, BudgetItemDatabaseController budgetItemDatabaseController, BudgetItemModel data, Consumer<BudgetItemModel> onUpdateScreen) {
    this.budgetId = budgetId;
    this.budgetItemDatabaseController = budgetItemDatabaseController;
    this.data = data;
    this.onUpdateScreen = onUpdateScreen;

    initComponents();

    // Preenche os campos com os atuais dados do item de orçamento caso a tela seja de atualização.
    if (data != null) {
      nameField.setText(data.getName());
      descriptionField.setText(data.getDescription());
      valueField.setText(String.valueOf(data.getValue()));
      periodicitySelect.setSelectedItem(data.getPeriod());

      screenTitle.setFocusable(true);
      screenTitle.setText("Atualizar Item de Orçamento");
      actionButton.setText("Atualizar");
    }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    background = new javax.swing.JPanel();
    screenTitle = new javax.swing.JLabel();
    nameLabel = new javax.swing.JLabel();
    nameField = new javax.swing.JTextField();
    descriptionField = new javax.swing.JTextField();
    descriptionLabel = new javax.swing.JLabel();
    valueField = new javax.swing.JTextField();
    valueLabel = new javax.swing.JLabel();
    actionButton = new javax.swing.JButton();
    cancelButton = new javax.swing.JButton();
    periodicityLabel = new javax.swing.JLabel();
    periodicitySelect = new javax.swing.JComboBox<>();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    background.setBackground(new java.awt.Color(255, 255, 255));

    screenTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
    screenTitle.setForeground(new java.awt.Color(0, 0, 0));
    screenTitle.setText("Criar Item de Orçamento");

    nameLabel.setBackground(new java.awt.Color(0, 0, 0));
    nameLabel.setForeground(new java.awt.Color(0, 0, 0));
    nameLabel.setText("Nome:");

    descriptionLabel.setBackground(new java.awt.Color(0, 0, 0));
    descriptionLabel.setForeground(new java.awt.Color(0, 0, 0));
    descriptionLabel.setText("Descrição:");

    valueLabel.setBackground(new java.awt.Color(0, 0, 0));
    valueLabel.setForeground(new java.awt.Color(0, 0, 0));
    valueLabel.setText("Valor:");

    actionButton.setText("Criar");
    actionButton.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        actionButtonMouseClicked(evt);
      }
    });

    cancelButton.setText("Cancelar");
    cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        cancelButtonMouseClicked(evt);
      }
    });

    periodicityLabel.setBackground(new java.awt.Color(0, 0, 0));
    periodicityLabel.setForeground(new java.awt.Color(0, 0, 0));
    periodicityLabel.setText("Periodicidade :");

    periodicitySelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Diário", "Semanal", "Mensal" }));

    javax.swing.GroupLayout backgroundLayout = new javax.swing.GroupLayout(background);
    background.setLayout(backgroundLayout);
    backgroundLayout.setHorizontalGroup(
      backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(backgroundLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(nameField)
          .addComponent(descriptionField)
          .addComponent(valueField)
          .addGroup(backgroundLayout.createSequentialGroup()
            .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(nameLabel)
              .addComponent(descriptionLabel)
              .addComponent(valueLabel)
              .addComponent(periodicityLabel)
              .addComponent(periodicitySelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(0, 0, Short.MAX_VALUE))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundLayout.createSequentialGroup()
            .addGap(0, 222, Short.MAX_VALUE)
            .addComponent(cancelButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(actionButton)))
        .addContainerGap())
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundLayout.createSequentialGroup()
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(screenTitle)
        .addGap(84, 84, 84))
    );
    backgroundLayout.setVerticalGroup(
      backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(backgroundLayout.createSequentialGroup()
        .addGap(20, 20, 20)
        .addComponent(screenTitle)
        .addGap(29, 29, 29)
        .addComponent(nameLabel)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(descriptionLabel)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(descriptionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(valueLabel)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(valueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(periodicityLabel)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(periodicitySelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(actionButton)
          .addComponent(cancelButton))
        .addContainerGap(24, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(background, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(background, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  /**
   * Método de criação ou atualização de um item de orçamento.
   */
  private void actionButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_actionButtonMouseClicked
    // Obtenção dos dados.
    String name = nameField.getText();
    String description = descriptionField.getText();
    String valueText = valueField.getText();

    // Verificação da presença dos dados necessários.
    if (name.isEmpty() || valueText.isEmpty() || description.isEmpty()) {
      JOptionPane.showMessageDialog(this, "Por favor, preencha todos os campos.", "Erro", JOptionPane.ERROR_MESSAGE);

      return;
    }

    // Validação do valor numérico.
    NumberValidator numberValidator = new NumberValidator();
    if (!numberValidator.validate(this, valueText, "item de orçamento")) {
      return;
    }

    String periodicity = (String) periodicitySelect.getSelectedItem();

    BudgetItemModel budgetItem;

    // Verifica se a tela é de atualização ou criação.
    if (data != null) {
      // Atualiza os dados do item de orçamento.
      budgetItem = new BudgetItemModel(
              data.getId(),
              budgetId,
              name,
              description,
              numberValidator.getNumber(),
              periodicity,
              data.getCreatedAt()
      );

      budgetItemDatabaseController.update(budgetItem);
    } else {
      LocalDate createdAt = LocalDate.now();

      // Cria o modelo de criação de um novo item de orçamento.
      CreateBudgetItemModel createBudgetItem = new CreateBudgetItemModel(
              budgetId,
              name,
              description,
              numberValidator.getNumber(),
              periodicity,
              createdAt
      );

      // Registra o novo item de orçamento e obtém o seu ID.
      String budgetItemId = budgetItemDatabaseController.create(createBudgetItem);

      // Cria o modelo de item de orçamento com o ID do registro.
      budgetItem = new BudgetItemModel(
              budgetItemId,
              budgetId,
              name,
              description,
              numberValidator.getNumber(),
              periodicity,
              createdAt
      );
    }

    onUpdateScreen.accept(budgetItem);

    this.dispose();
  }//GEN-LAST:event_actionButtonMouseClicked

  /**
   * Método chamado para sair da tela.
   */
  private void cancelButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseClicked
    this.dispose();
  }//GEN-LAST:event_cancelButtonMouseClicked

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton actionButton;
  private javax.swing.JPanel background;
  private javax.swing.JButton cancelButton;
  private javax.swing.JTextField descriptionField;
  private javax.swing.JLabel descriptionLabel;
  private javax.swing.JTextField nameField;
  private javax.swing.JLabel nameLabel;
  private javax.swing.JLabel periodicityLabel;
  private javax.swing.JComboBox<String> periodicitySelect;
  private javax.swing.JLabel screenTitle;
  private javax.swing.JTextField valueField;
  private javax.swing.JLabel valueLabel;
  // End of variables declaration//GEN-END:variables
}
