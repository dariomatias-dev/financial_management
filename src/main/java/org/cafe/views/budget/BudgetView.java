package org.cafe.views.budget;

import java.util.ArrayList;
import java.util.function.Consumer;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import org.cafe.database.controllers.BudgetController;
import org.cafe.database.controllers.BudgetItemController;
import org.cafe.models.budget.BudgetModel;
import org.cafe.models.budget_item.BudgetItemModel;
import org.cafe.utils.BudgetCalculator;
import org.cafe.utils.CurrencyFormatterUtil;
import org.cafe.utils.RecordVerificationUtil;
import org.cafe.views.budget.components.manager_budget_item.ManagerBudgetItemView;

public class BudgetView extends javax.swing.JFrame {
  private BudgetModel budget;
  private final BudgetController budgetController;
  private final BudgetItemController budgetItemController;
  private ArrayList<BudgetItemModel> budgetItems;
  private final Consumer<BudgetModel> onUpdateBudget;

  /**
   * Construtor.
   *
   * @param budgetController Controlador de de orçamentos.
   * @param budgetItemController Controlador de itens de orçamento.
   * @param budget Dados do registro selecionado. orçamentos.
   * @param onUpdateBudget Função para atualização do orçamento.
   */
  public BudgetView(BudgetController budgetController, BudgetItemController budgetItemController, BudgetModel budget, Consumer<BudgetModel> onUpdateBudget) {
    this.budget = budget;
    this.budgetController = budgetController;
    this.budgetItemController = budgetItemController;
    this.onUpdateBudget = onUpdateBudget;

    initComponents();

    screenTitle.setText(budget.getName());

    listBudgetItems();
  }

  /**
   * Lista todos os itens de orçamento.
   */
  private void listBudgetItems() {
    valueBudget.setText("Orçamento: " + budget.getValue());

    budgetItems = budgetItemController.getAllByBudgetId(budget.getId());
    DefaultListModel<String> model = new DefaultListModel<>();
    budgetItemList.setModel(model);

    for (BudgetItemModel budgetItem : budgetItems) {
      String budgetItemName = budgetItem.getName();
      String formattedValue = CurrencyFormatterUtil.format(budgetItem.getValue());
      String displayText = budgetItemName + "     -     " + formattedValue;
      model.addElement(displayText);
    }
  }

  /**
   * Atualiza a lista de itens de orçamento para exibir somente os itens
   * orçamento que existem.
   */
  private void updateScreen() {
    DefaultListModel<String> model = new DefaultListModel<>();
    budgetItemList.setModel(model);
    model.clear();
    listBudgetItems();
  }

  /**
   * Método chamado quando um novo orçamento é criado.
   */
  private void onBudgetItemCreated() {
    updateScreen();

    calculateBudgetValue();

  }

  private void calculateBudgetValue() {
    budget = new BudgetCalculator().calculate(budget, budgetController, budgetItems);

    valueBudget.setText("Orçamento: " + budget.getValue());

    onUpdateBudget.accept(budget);
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    background = new javax.swing.JPanel();
    screenTitle = new javax.swing.JLabel();
    exitButton = new javax.swing.JLabel();
    jScrollPane1 = new javax.swing.JScrollPane();
    budgetItemList = new javax.swing.JList<>();
    deleteButton = new javax.swing.JButton();
    updateButton = new javax.swing.JButton();
    addButton = new javax.swing.JButton();
    valueBudget = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    background.setBackground(new java.awt.Color(255, 255, 255));

    screenTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
    screenTitle.setForeground(new java.awt.Color(0, 0, 0));
    screenTitle.setText("Orçamento");

    exitButton.setForeground(new java.awt.Color(255, 0, 51));
    exitButton.setText("Sair");
    exitButton.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        exitButtonMouseClicked(evt);
      }
    });

    budgetItemList.setBorder(null);
    jScrollPane1.setViewportView(budgetItemList);

    deleteButton.setForeground(new java.awt.Color(255, 0, 51));
    deleteButton.setText("Excluir");
    deleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        deleteButtonMouseClicked(evt);
      }
    });

    updateButton.setText("Atualizar");
    updateButton.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        updateButtonMouseClicked(evt);
      }
    });

    addButton.setText("Adicionar");
    addButton.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        addButtonMouseClicked(evt);
      }
    });

    javax.swing.GroupLayout backgroundLayout = new javax.swing.GroupLayout(background);
    background.setLayout(backgroundLayout);
    backgroundLayout.setHorizontalGroup(
      backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(backgroundLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundLayout.createSequentialGroup()
            .addComponent(valueBudget)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(updateButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(deleteButton))
          .addGroup(backgroundLayout.createSequentialGroup()
            .addComponent(exitButton)
            .addGap(34, 34, 34)
            .addComponent(screenTitle)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(addButton)))
        .addContainerGap())
      .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
    );
    backgroundLayout.setVerticalGroup(
      backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(backgroundLayout.createSequentialGroup()
        .addGap(19, 19, 19)
        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(screenTitle)
          .addComponent(exitButton)
          .addComponent(addButton))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(deleteButton)
            .addComponent(updateButton))
          .addComponent(valueBudget))
        .addContainerGap(145, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(background, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(0, 0, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(background, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(0, 0, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void exitButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitButtonMouseClicked
    this.dispose();
  }//GEN-LAST:event_exitButtonMouseClicked

  private void deleteButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseClicked
    if (RecordVerificationUtil.verifyRecords(budgetItemList, "excluir")) {
      // Confirmar remoção de registro.
      int confirm = JOptionPane.showConfirmDialog(
              null,
              "Você realmente deseja excluir este registro?",
              "Confirmar Exclusão",
              JOptionPane.YES_NO_OPTION,
              JOptionPane.WARNING_MESSAGE
      );

      // Se o usuário confirmar, exclui o registro.
      if (confirm == JOptionPane.YES_OPTION) {
        BudgetItemModel selectedExpense = budgetItems.get(budgetItemList.getSelectedIndex());
        budgetItemController.removeById(selectedExpense.getId());

        updateScreen();
        
        calculateBudgetValue();
      }
    }
  }//GEN-LAST:event_deleteButtonMouseClicked

  private void updateButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseClicked
    if (RecordVerificationUtil.verifyRecords(budgetItemList, "atualizar")) {
      BudgetItemModel selectedBudget = budgetItems.get(budgetItemList.getSelectedIndex());
      ManagerBudgetItemView updateManagerBudgetItemView = new ManagerBudgetItemView(budget.getId(), budgetItemController, selectedBudget, this::updateScreen);

      updateManagerBudgetItemView.setVisible(true);
    }
  }//GEN-LAST:event_updateButtonMouseClicked

  private void addButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseClicked
    ManagerBudgetItemView createManagerBudgetItemView = new ManagerBudgetItemView(
            budget.getId(),
            budgetItemController,
            null,
            this::onBudgetItemCreated
    );

    createManagerBudgetItemView.setVisible(true);
  }//GEN-LAST:event_addButtonMouseClicked

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton addButton;
  private javax.swing.JPanel background;
  private javax.swing.JList<String> budgetItemList;
  private javax.swing.JButton deleteButton;
  private javax.swing.JLabel exitButton;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JLabel screenTitle;
  private javax.swing.JButton updateButton;
  private javax.swing.JLabel valueBudget;
  // End of variables declaration//GEN-END:variables
}
