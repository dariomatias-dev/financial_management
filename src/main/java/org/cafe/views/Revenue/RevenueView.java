package org.cafe.views.Revenue;

import java.util.ArrayList;
import javax.swing.DefaultListModel;
import org.cafe.database.controllers.RevenueController;
import org.cafe.models.revenue.RevenueModel;
import org.cafe.views.Revenue.components.Manager_register.ManagerRevenueRegisterView;
import javax.swing.JOptionPane;
import org.cafe.utils.CurrencyFormatter;

public class RevenueView extends javax.swing.JFrame {

    private final RevenueController revenueController;
    private ArrayList<RevenueModel> revenues;

    /**
     * Construtor.
     *
     * @param revenueController Controlador de despesas.
     */
    public RevenueView(RevenueController revenueController) {
        this.revenueController = revenueController;

        initComponents();

        listRevenues();
    }

    /**
     * Lista todas as despesas.
     */
    private void listRevenues() {
        revenues = revenueController.getAll();
        DefaultListModel<String> model = new DefaultListModel<>();
        revenueList.setModel(model);

        for (RevenueModel revenue : revenues) {
            String revenueName = revenue.getName();
            String formattedValue = CurrencyFormatter.format(revenue.getValue());
            String displayText = revenueName + "     -     " + formattedValue;
            model.addElement(displayText);
        }
    }

    /**
     * Atualiza a lista de despesas para exibir somente as despesas que existem.
     */
    private void updateScreen() {
        DefaultListModel<String> model = new DefaultListModel<>();
        revenueList.setModel(model);
        model.clear();
        listRevenues();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        exitButton = new javax.swing.JLabel();
        screenTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        revenueList = new javax.swing.JList<>();
        addButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        exitButton.setForeground(new java.awt.Color(255, 0, 51));
        exitButton.setText("Sair");
        exitButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitButtonMouseClicked(evt);
            }
        });

        screenTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        screenTitle.setText("Receitas");

        jScrollPane1.setViewportView(revenueList);

        addButton.setText("Adicionar");
        addButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addButtonMouseClicked(evt);
            }
        });

        updateButton.setText("Atualizar");
        updateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateButtonMouseClicked(evt);
            }
        });

        deleteButton.setForeground(new java.awt.Color(255, 0, 51));
        deleteButton.setText("Excluir");
        deleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteButtonMouseClicked(evt);
            }
        });
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exitButton)
                .addGap(34, 34, 34)
                .addComponent(screenTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addButton)
                .addGap(14, 14, 14))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(updateButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exitButton)
                    .addComponent(screenTitle)
                    .addComponent(addButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteButton)
                    .addComponent(updateButton))
                .addContainerGap(343, Short.MAX_VALUE))
        );
    }// </editor-fold>                        

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    private void deleteButtonMouseClicked(java.awt.event.MouseEvent evt) {                                          
       if (verifyRecords("excluir")) {
            // Confirmar remoção de registro.
            int confirm = JOptionPane.showConfirmDialog(
                    null,
                    "Você realmente deseja excluir este registro?",
                    "Confirmar Exclusão",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE
            );

            // Se o usuário confirmar, exclui o registro.
            if (confirm == JOptionPane.YES_OPTION) {
                RevenueModel selectedRevenue = revenues.get(revenueList.getSelectedIndex());
                revenueController.removeById(selectedRevenue.getId());

                updateScreen();
            }
        }
    }                                         

    private void updateButtonMouseClicked(java.awt.event.MouseEvent evt) {                                          
        if (verifyRecords("atualizar")) {
            RevenueModel selectedExpense = revenues.get(revenueList.getSelectedIndex());
            ManagerRevenueRegisterView createRevenueRegisterView = new ManagerRevenueRegisterView(revenueController, selectedExpense, this::updateScreen);

            createRevenueRegisterView.setVisible(true);
        }
    }                                         

    private void addButtonMouseClicked(java.awt.event.MouseEvent evt) {                                       
        ManagerRevenueRegisterView createRevenueRegisterView = new ManagerRevenueRegisterView(revenueController, null, this::updateScreen);

        createRevenueRegisterView.setVisible(true);
    }                                      

    private void exitButtonMouseClicked(java.awt.event.MouseEvent evt) {                                        
        this.dispose();
    }                                       
private boolean verifyRecords(
            String actionName
    ) {
        // Verifica se existe registros.
        if (revenues.isEmpty()) {
            JOptionPane.showMessageDialog(
                    null,
                    String.format("Não há registros para %s.", actionName),
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

            return false;
        }

        // Verifica se um registro foi selecionado.
        int selectedIndex = revenueList.getSelectedIndex();
        if (selectedIndex == -1) {
            JOptionPane.showMessageDialog(
                    null,
                    "Por favor, selecione um registro.",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

            return false;
        }

        return true;
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton addButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel exitButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> revenueList;
    private javax.swing.JLabel screenTitle;
    private javax.swing.JButton updateButton;
    // End of variables declaration                   
}
